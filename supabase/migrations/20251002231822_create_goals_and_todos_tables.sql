/*
  # Create Goals and Daily TODOs System

  1. New Tables
    - `goals`
      - `id` (uuid, primary key)
      - `user_id` (uuid, references auth.users)
      - `title` (text) - The goal description
      - `duration` (text) - Duration: 1month, 3months, 6months, 1year
      - `start_date` (date) - When the goal starts
      - `end_date` (date) - When the goal ends
      - `status` (text) - active, completed, archived
      - `created_at` (timestamptz)
      - `updated_at` (timestamptz)
    
    - `daily_todos`
      - `id` (uuid, primary key)
      - `goal_id` (uuid, references goals)
      - `todo_date` (date) - The date this TODO is for
      - `content` (text) - The TODO content generated by AI
      - `completed` (boolean) - Whether the TODO is completed
      - `created_at` (timestamptz)
      - `updated_at` (timestamptz)
  
  2. Security
    - Enable RLS on both tables
    - Add policies for authenticated users to manage their own data
*/

-- Create goals table
CREATE TABLE IF NOT EXISTS goals (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  title text NOT NULL,
  duration text NOT NULL CHECK (duration IN ('1month', '3months', '6months', '1year')),
  start_date date NOT NULL DEFAULT CURRENT_DATE,
  end_date date NOT NULL,
  status text NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'completed', 'archived')),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create daily_todos table
CREATE TABLE IF NOT EXISTS daily_todos (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  goal_id uuid REFERENCES goals(id) ON DELETE CASCADE NOT NULL,
  todo_date date NOT NULL,
  content text NOT NULL,
  completed boolean DEFAULT false,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_goals_user_id ON goals(user_id);
CREATE INDEX IF NOT EXISTS idx_goals_status ON goals(status);
CREATE INDEX IF NOT EXISTS idx_daily_todos_goal_id ON daily_todos(goal_id);
CREATE INDEX IF NOT EXISTS idx_daily_todos_date ON daily_todos(todo_date);

-- Enable RLS
ALTER TABLE goals ENABLE ROW LEVEL SECURITY;
ALTER TABLE daily_todos ENABLE ROW LEVEL SECURITY;

-- Goals policies
CREATE POLICY "Users can view own goals"
  ON goals FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own goals"
  ON goals FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own goals"
  ON goals FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own goals"
  ON goals FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Daily todos policies
CREATE POLICY "Users can view own todos"
  ON daily_todos FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM goals
      WHERE goals.id = daily_todos.goal_id
      AND goals.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert own todos"
  ON daily_todos FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM goals
      WHERE goals.id = daily_todos.goal_id
      AND goals.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update own todos"
  ON daily_todos FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM goals
      WHERE goals.id = daily_todos.goal_id
      AND goals.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM goals
      WHERE goals.id = daily_todos.goal_id
      AND goals.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete own todos"
  ON daily_todos FOR DELETE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM goals
      WHERE goals.id = daily_todos.goal_id
      AND goals.user_id = auth.uid()
    )
  );